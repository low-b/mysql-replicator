// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: binlog_event.proto

#ifndef PROTOBUF_binlog_5fevent_2eproto__INCLUDED
#define PROTOBUF_binlog_5fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mysql_replicator {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_binlog_5fevent_2eproto();
void protobuf_AssignDesc_binlog_5fevent_2eproto();
void protobuf_ShutdownFile_binlog_5fevent_2eproto();

class Field;
class Row;
class Status;
class BinlogEvent;

enum MysqlType {
  MYSQL_TYPE_DECIMAL = 0,
  MYSQL_TYPE_TINY = 1,
  MYSQL_TYPE_SHORT = 2,
  MYSQL_TYPE_LONG = 3,
  MYSQL_TYPE_FLOAT = 4,
  MYSQL_TYPE_DOUBLE = 5,
  MYSQL_TYPE_NULL = 6,
  MYSQL_TYPE_TIMESTAMP = 7,
  MYSQL_TYPE_LONGLONG = 8,
  MYSQL_TYPE_INT24 = 9,
  MYSQL_TYPE_DATE = 10,
  MYSQL_TYPE_TIME = 11,
  MYSQL_TYPE_DATETIME = 12,
  MYSQL_TYPE_YEAR = 13,
  MYSQL_TYPE_NEWDATE = 14,
  MYSQL_TYPE_VARCHAR = 15,
  MYSQL_TYPE_BIT = 16,
  MYSQL_TYPE_TIMESTAMP2 = 17,
  MYSQL_TYPE_DATETIME2 = 18,
  MYSQL_TYPE_TIME2 = 19,
  MYSQL_TYPE_JSON = 245,
  MYSQL_TYPE_NEWDECIMAL = 246,
  MYSQL_TYPE_ENUM = 247,
  MYSQL_TYPE_SET = 248,
  MYSQL_TYPE_TINY_BLOB = 249,
  MYSQL_TYPE_MEDIUM_BLOB = 250,
  MYSQL_TYPE_LONG_BLOB = 251,
  MYSQL_TYPE_BLOB = 252,
  MYSQL_TYPE_VAR_STRING = 253,
  MYSQL_TYPE_STRING = 254,
  MYSQL_TYPE_GEOMETRY = 255
};
bool MysqlType_IsValid(int value);
const MysqlType MysqlType_MIN = MYSQL_TYPE_DECIMAL;
const MysqlType MysqlType_MAX = MYSQL_TYPE_GEOMETRY;
const int MysqlType_ARRAYSIZE = MysqlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MysqlType_descriptor();
inline const ::std::string& MysqlType_Name(MysqlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MysqlType_descriptor(), value);
}
inline bool MysqlType_Parse(
    const ::std::string& name, MysqlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MysqlType>(
    MysqlType_descriptor(), name, value);
}
enum EventType {
  UPDATE_EVENT = 0,
  INSERT_EVENT = 1,
  DELETE_EVENT = 2
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = UPDATE_EVENT;
const EventType EventType_MAX = DELETE_EVENT;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Field : public ::google::protobuf::Message {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  void Swap(Field* other);

  // implements Message ----------------------------------------------

  Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .mysql_replicator.MysqlType mysql_type = 2;
  inline bool has_mysql_type() const;
  inline void clear_mysql_type();
  static const int kMysqlTypeFieldNumber = 2;
  inline ::mysql_replicator::MysqlType mysql_type() const;
  inline void set_mysql_type(::mysql_replicator::MysqlType value);

  // required bool is_signed = 3 [default = false];
  inline bool has_is_signed() const;
  inline void clear_is_signed();
  static const int kIsSignedFieldNumber = 3;
  inline bool is_signed() const;
  inline void set_is_signed(bool value);

  // required bool is_pk = 4;
  inline bool has_is_pk() const;
  inline void clear_is_pk();
  static const int kIsPkFieldNumber = 4;
  inline bool is_pk() const;
  inline void set_is_pk(bool value);

  // optional bool is_old_null = 6 [default = false];
  inline bool has_is_old_null() const;
  inline void clear_is_old_null();
  static const int kIsOldNullFieldNumber = 6;
  inline bool is_old_null() const;
  inline void set_is_old_null(bool value);

  // optional bytes old_value = 7;
  inline bool has_old_value() const;
  inline void clear_old_value();
  static const int kOldValueFieldNumber = 7;
  inline const ::std::string& old_value() const;
  inline void set_old_value(const ::std::string& value);
  inline void set_old_value(const char* value);
  inline void set_old_value(const void* value, size_t size);
  inline ::std::string* mutable_old_value();
  inline ::std::string* release_old_value();
  inline void set_allocated_old_value(::std::string* old_value);

  // optional bool is_new_null = 8 [default = false];
  inline bool has_is_new_null() const;
  inline void clear_is_new_null();
  static const int kIsNewNullFieldNumber = 8;
  inline bool is_new_null() const;
  inline void set_is_new_null(bool value);

  // optional bytes new_value = 9;
  inline bool has_new_value() const;
  inline void clear_new_value();
  static const int kNewValueFieldNumber = 9;
  inline const ::std::string& new_value() const;
  inline void set_new_value(const ::std::string& value);
  inline void set_new_value(const char* value);
  inline void set_new_value(const void* value, size_t size);
  inline ::std::string* mutable_new_value();
  inline ::std::string* release_new_value();
  inline void set_allocated_new_value(::std::string* new_value);

  // optional string charset = 10;
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 10;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  inline void set_allocated_charset(::std::string* charset);

  // @@protoc_insertion_point(class_scope:mysql_replicator.Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mysql_type();
  inline void clear_has_mysql_type();
  inline void set_has_is_signed();
  inline void clear_has_is_signed();
  inline void set_has_is_pk();
  inline void clear_has_is_pk();
  inline void set_has_is_old_null();
  inline void clear_has_is_old_null();
  inline void set_has_old_value();
  inline void clear_has_old_value();
  inline void set_has_is_new_null();
  inline void clear_has_is_new_null();
  inline void set_has_new_value();
  inline void clear_has_new_value();
  inline void set_has_charset();
  inline void clear_has_charset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int mysql_type_;
  bool is_signed_;
  bool is_pk_;
  bool is_old_null_;
  bool is_new_null_;
  ::std::string* old_value_;
  ::std::string* new_value_;
  ::std::string* charset_;
  friend void  protobuf_AddDesc_binlog_5fevent_2eproto();
  friend void protobuf_AssignDesc_binlog_5fevent_2eproto();
  friend void protobuf_ShutdownFile_binlog_5fevent_2eproto();

  void InitAsDefaultInstance();
  static Field* default_instance_;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  void Swap(Row* other);

  // implements Message ----------------------------------------------

  Row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mysql_replicator.Field field = 1;
  inline int field_size() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 1;
  inline const ::mysql_replicator::Field& field(int index) const;
  inline ::mysql_replicator::Field* mutable_field(int index);
  inline ::mysql_replicator::Field* add_field();
  inline const ::google::protobuf::RepeatedPtrField< ::mysql_replicator::Field >&
      field() const;
  inline ::google::protobuf::RepeatedPtrField< ::mysql_replicator::Field >*
      mutable_field();

  // @@protoc_insertion_point(class_scope:mysql_replicator.Row)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mysql_replicator::Field > field_;
  friend void  protobuf_AddDesc_binlog_5fevent_2eproto();
  friend void protobuf_AssignDesc_binlog_5fevent_2eproto();
  friend void protobuf_ShutdownFile_binlog_5fevent_2eproto();

  void InitAsDefaultInstance();
  static Row* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log_file = 1;
  inline bool has_log_file() const;
  inline void clear_log_file();
  static const int kLogFileFieldNumber = 1;
  inline const ::std::string& log_file() const;
  inline void set_log_file(const ::std::string& value);
  inline void set_log_file(const char* value);
  inline void set_log_file(const char* value, size_t size);
  inline ::std::string* mutable_log_file();
  inline ::std::string* release_log_file();
  inline void set_allocated_log_file(::std::string* log_file);

  // required uint32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // required uint32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required string host = 4;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 4;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint64 progress = 6;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 6;
  inline ::google::protobuf::uint64 progress() const;
  inline void set_progress(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mysql_replicator.Status)
 private:
  inline void set_has_log_file();
  inline void clear_has_log_file();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_progress();
  inline void clear_has_progress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* log_file_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 timestamp_;
  ::std::string* host_;
  ::google::protobuf::uint64 progress_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_binlog_5fevent_2eproto();
  friend void protobuf_AssignDesc_binlog_5fevent_2eproto();
  friend void protobuf_ShutdownFile_binlog_5fevent_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class BinlogEvent : public ::google::protobuf::Message {
 public:
  BinlogEvent();
  virtual ~BinlogEvent();

  BinlogEvent(const BinlogEvent& from);

  inline BinlogEvent& operator=(const BinlogEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinlogEvent& default_instance();

  void Swap(BinlogEvent* other);

  // implements Message ----------------------------------------------

  BinlogEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinlogEvent& from);
  void MergeFrom(const BinlogEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string db = 1;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 1;
  inline const ::std::string& db() const;
  inline void set_db(const ::std::string& value);
  inline void set_db(const char* value);
  inline void set_db(const char* value, size_t size);
  inline ::std::string* mutable_db();
  inline ::std::string* release_db();
  inline void set_allocated_db(::std::string* db);

  // required string table = 2;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 2;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const char* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  inline void set_allocated_table(::std::string* table);

  // required .mysql_replicator.EventType event_type = 3;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  inline ::mysql_replicator::EventType event_type() const;
  inline void set_event_type(::mysql_replicator::EventType value);

  // optional .mysql_replicator.Status status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline const ::mysql_replicator::Status& status() const;
  inline ::mysql_replicator::Status* mutable_status();
  inline ::mysql_replicator::Status* release_status();
  inline void set_allocated_status(::mysql_replicator::Status* status);

  // optional string charset = 5;
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 5;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  inline void set_allocated_charset(::std::string* charset);

  // optional .mysql_replicator.Row row = 6;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 6;
  inline const ::mysql_replicator::Row& row() const;
  inline ::mysql_replicator::Row* mutable_row();
  inline ::mysql_replicator::Row* release_row();
  inline void set_allocated_row(::mysql_replicator::Row* row);

  // @@protoc_insertion_point(class_scope:mysql_replicator.BinlogEvent)
 private:
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_charset();
  inline void clear_has_charset();
  inline void set_has_row();
  inline void clear_has_row();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* db_;
  ::std::string* table_;
  ::mysql_replicator::Status* status_;
  ::std::string* charset_;
  ::mysql_replicator::Row* row_;
  int event_type_;
  friend void  protobuf_AddDesc_binlog_5fevent_2eproto();
  friend void protobuf_AssignDesc_binlog_5fevent_2eproto();
  friend void protobuf_ShutdownFile_binlog_5fevent_2eproto();

  void InitAsDefaultInstance();
  static BinlogEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// Field

// required string name = 1;
inline bool Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Field::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Field::name() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.name)
  return *name_;
}
inline void Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.name)
}
inline void Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.Field.name)
}
inline void Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.Field.name)
}
inline ::std::string* Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Field.name)
  return name_;
}
inline ::std::string* Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Field::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.Field.name)
}

// required .mysql_replicator.MysqlType mysql_type = 2;
inline bool Field::has_mysql_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Field::set_has_mysql_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Field::clear_has_mysql_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Field::clear_mysql_type() {
  mysql_type_ = 0;
  clear_has_mysql_type();
}
inline ::mysql_replicator::MysqlType Field::mysql_type() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.mysql_type)
  return static_cast< ::mysql_replicator::MysqlType >(mysql_type_);
}
inline void Field::set_mysql_type(::mysql_replicator::MysqlType value) {
  assert(::mysql_replicator::MysqlType_IsValid(value));
  set_has_mysql_type();
  mysql_type_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.mysql_type)
}

// required bool is_signed = 3 [default = false];
inline bool Field::has_is_signed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Field::set_has_is_signed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Field::clear_has_is_signed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Field::clear_is_signed() {
  is_signed_ = false;
  clear_has_is_signed();
}
inline bool Field::is_signed() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.is_signed)
  return is_signed_;
}
inline void Field::set_is_signed(bool value) {
  set_has_is_signed();
  is_signed_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.is_signed)
}

// required bool is_pk = 4;
inline bool Field::has_is_pk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Field::set_has_is_pk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Field::clear_has_is_pk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Field::clear_is_pk() {
  is_pk_ = false;
  clear_has_is_pk();
}
inline bool Field::is_pk() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.is_pk)
  return is_pk_;
}
inline void Field::set_is_pk(bool value) {
  set_has_is_pk();
  is_pk_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.is_pk)
}

// optional bool is_old_null = 6 [default = false];
inline bool Field::has_is_old_null() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Field::set_has_is_old_null() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Field::clear_has_is_old_null() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Field::clear_is_old_null() {
  is_old_null_ = false;
  clear_has_is_old_null();
}
inline bool Field::is_old_null() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.is_old_null)
  return is_old_null_;
}
inline void Field::set_is_old_null(bool value) {
  set_has_is_old_null();
  is_old_null_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.is_old_null)
}

// optional bytes old_value = 7;
inline bool Field::has_old_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Field::set_has_old_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Field::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Field::clear_old_value() {
  if (old_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_->clear();
  }
  clear_has_old_value();
}
inline const ::std::string& Field::old_value() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.old_value)
  return *old_value_;
}
inline void Field::set_old_value(const ::std::string& value) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.old_value)
}
inline void Field::set_old_value(const char* value) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.Field.old_value)
}
inline void Field::set_old_value(const void* value, size_t size) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.Field.old_value)
}
inline ::std::string* Field::mutable_old_value() {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Field.old_value)
  return old_value_;
}
inline ::std::string* Field::release_old_value() {
  clear_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = old_value_;
    old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Field::set_allocated_old_value(::std::string* old_value) {
  if (old_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_value_;
  }
  if (old_value) {
    set_has_old_value();
    old_value_ = old_value;
  } else {
    clear_has_old_value();
    old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.Field.old_value)
}

// optional bool is_new_null = 8 [default = false];
inline bool Field::has_is_new_null() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Field::set_has_is_new_null() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Field::clear_has_is_new_null() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Field::clear_is_new_null() {
  is_new_null_ = false;
  clear_has_is_new_null();
}
inline bool Field::is_new_null() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.is_new_null)
  return is_new_null_;
}
inline void Field::set_is_new_null(bool value) {
  set_has_is_new_null();
  is_new_null_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.is_new_null)
}

// optional bytes new_value = 9;
inline bool Field::has_new_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Field::set_has_new_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Field::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Field::clear_new_value() {
  if (new_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_value_->clear();
  }
  clear_has_new_value();
}
inline const ::std::string& Field::new_value() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.new_value)
  return *new_value_;
}
inline void Field::set_new_value(const ::std::string& value) {
  set_has_new_value();
  if (new_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_value_ = new ::std::string;
  }
  new_value_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.new_value)
}
inline void Field::set_new_value(const char* value) {
  set_has_new_value();
  if (new_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_value_ = new ::std::string;
  }
  new_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.Field.new_value)
}
inline void Field::set_new_value(const void* value, size_t size) {
  set_has_new_value();
  if (new_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_value_ = new ::std::string;
  }
  new_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.Field.new_value)
}
inline ::std::string* Field::mutable_new_value() {
  set_has_new_value();
  if (new_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Field.new_value)
  return new_value_;
}
inline ::std::string* Field::release_new_value() {
  clear_has_new_value();
  if (new_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_value_;
    new_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Field::set_allocated_new_value(::std::string* new_value) {
  if (new_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_value_;
  }
  if (new_value) {
    set_has_new_value();
    new_value_ = new_value;
  } else {
    clear_has_new_value();
    new_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.Field.new_value)
}

// optional string charset = 10;
inline bool Field::has_charset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Field::set_has_charset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Field::clear_has_charset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Field::clear_charset() {
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_->clear();
  }
  clear_has_charset();
}
inline const ::std::string& Field::charset() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Field.charset)
  return *charset_;
}
inline void Field::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.Field.charset)
}
inline void Field::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.Field.charset)
}
inline void Field::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.Field.charset)
}
inline ::std::string* Field::mutable_charset() {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Field.charset)
  return charset_;
}
inline ::std::string* Field::release_charset() {
  clear_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Field::set_allocated_charset(::std::string* charset) {
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (charset) {
    set_has_charset();
    charset_ = charset;
  } else {
    clear_has_charset();
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.Field.charset)
}

// -------------------------------------------------------------------

// Row

// repeated .mysql_replicator.Field field = 1;
inline int Row::field_size() const {
  return field_.size();
}
inline void Row::clear_field() {
  field_.Clear();
}
inline const ::mysql_replicator::Field& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Row.field)
  return field_.Get(index);
}
inline ::mysql_replicator::Field* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Row.field)
  return field_.Mutable(index);
}
inline ::mysql_replicator::Field* Row::add_field() {
  // @@protoc_insertion_point(field_add:mysql_replicator.Row.field)
  return field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mysql_replicator::Field >&
Row::field() const {
  // @@protoc_insertion_point(field_list:mysql_replicator.Row.field)
  return field_;
}
inline ::google::protobuf::RepeatedPtrField< ::mysql_replicator::Field >*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:mysql_replicator.Row.field)
  return &field_;
}

// -------------------------------------------------------------------

// Status

// required string log_file = 1;
inline bool Status::has_log_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_log_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_log_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_log_file() {
  if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_->clear();
  }
  clear_has_log_file();
}
inline const ::std::string& Status::log_file() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Status.log_file)
  return *log_file_;
}
inline void Status::set_log_file(const ::std::string& value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.Status.log_file)
}
inline void Status::set_log_file(const char* value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.Status.log_file)
}
inline void Status::set_log_file(const char* value, size_t size) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.Status.log_file)
}
inline ::std::string* Status::mutable_log_file() {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Status.log_file)
  return log_file_;
}
inline ::std::string* Status::release_log_file() {
  clear_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_file_;
    log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Status::set_allocated_log_file(::std::string* log_file) {
  if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_file_;
  }
  if (log_file) {
    set_has_log_file();
    log_file_ = log_file;
  } else {
    clear_has_log_file();
    log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.Status.log_file)
}

// required uint32 offset = 2;
inline bool Status::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 Status::offset() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Status.offset)
  return offset_;
}
inline void Status::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Status.offset)
}

// required uint32 timestamp = 3;
inline bool Status::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 Status::timestamp() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Status.timestamp)
  return timestamp_;
}
inline void Status::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Status.timestamp)
}

// required string host = 4;
inline bool Status::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Status::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Status::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Status::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Status::host() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Status.host)
  return *host_;
}
inline void Status::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.Status.host)
}
inline void Status::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.Status.host)
}
inline void Status::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.Status.host)
}
inline ::std::string* Status::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.Status.host)
  return host_;
}
inline ::std::string* Status::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Status::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.Status.host)
}

// required uint32 port = 5;
inline bool Status::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Status::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Status::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Status::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Status::port() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Status.port)
  return port_;
}
inline void Status::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Status.port)
}

// optional uint64 progress = 6;
inline bool Status::has_progress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Status::set_has_progress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Status::clear_has_progress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Status::clear_progress() {
  progress_ = GOOGLE_ULONGLONG(0);
  clear_has_progress();
}
inline ::google::protobuf::uint64 Status::progress() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.Status.progress)
  return progress_;
}
inline void Status::set_progress(::google::protobuf::uint64 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.Status.progress)
}

// -------------------------------------------------------------------

// BinlogEvent

// required string db = 1;
inline bool BinlogEvent::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinlogEvent::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinlogEvent::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinlogEvent::clear_db() {
  if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_->clear();
  }
  clear_has_db();
}
inline const ::std::string& BinlogEvent::db() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.BinlogEvent.db)
  return *db_;
}
inline void BinlogEvent::set_db(const ::std::string& value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  db_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.BinlogEvent.db)
}
inline void BinlogEvent::set_db(const char* value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  db_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.BinlogEvent.db)
}
inline void BinlogEvent::set_db(const char* value, size_t size) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  db_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.BinlogEvent.db)
}
inline ::std::string* BinlogEvent::mutable_db() {
  set_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    db_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.BinlogEvent.db)
  return db_;
}
inline ::std::string* BinlogEvent::release_db() {
  clear_has_db();
  if (db_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = db_;
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BinlogEvent::set_allocated_db(::std::string* db) {
  if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_;
  }
  if (db) {
    set_has_db();
    db_ = db;
  } else {
    clear_has_db();
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.BinlogEvent.db)
}

// required string table = 2;
inline bool BinlogEvent::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinlogEvent::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BinlogEvent::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BinlogEvent::clear_table() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& BinlogEvent::table() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.BinlogEvent.table)
  return *table_;
}
inline void BinlogEvent::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.BinlogEvent.table)
}
inline void BinlogEvent::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.BinlogEvent.table)
}
inline void BinlogEvent::set_table(const char* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.BinlogEvent.table)
}
inline ::std::string* BinlogEvent::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    table_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.BinlogEvent.table)
  return table_;
}
inline ::std::string* BinlogEvent::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BinlogEvent::set_allocated_table(::std::string* table) {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (table) {
    set_has_table();
    table_ = table;
  } else {
    clear_has_table();
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.BinlogEvent.table)
}

// required .mysql_replicator.EventType event_type = 3;
inline bool BinlogEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinlogEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BinlogEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BinlogEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::mysql_replicator::EventType BinlogEvent::event_type() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.BinlogEvent.event_type)
  return static_cast< ::mysql_replicator::EventType >(event_type_);
}
inline void BinlogEvent::set_event_type(::mysql_replicator::EventType value) {
  assert(::mysql_replicator::EventType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:mysql_replicator.BinlogEvent.event_type)
}

// optional .mysql_replicator.Status status = 4;
inline bool BinlogEvent::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BinlogEvent::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BinlogEvent::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BinlogEvent::clear_status() {
  if (status_ != NULL) status_->::mysql_replicator::Status::Clear();
  clear_has_status();
}
inline const ::mysql_replicator::Status& BinlogEvent::status() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.BinlogEvent.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mysql_replicator::Status* BinlogEvent::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::mysql_replicator::Status;
  // @@protoc_insertion_point(field_mutable:mysql_replicator.BinlogEvent.status)
  return status_;
}
inline ::mysql_replicator::Status* BinlogEvent::release_status() {
  clear_has_status();
  ::mysql_replicator::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void BinlogEvent::set_allocated_status(::mysql_replicator::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.BinlogEvent.status)
}

// optional string charset = 5;
inline bool BinlogEvent::has_charset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BinlogEvent::set_has_charset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BinlogEvent::clear_has_charset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BinlogEvent::clear_charset() {
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_->clear();
  }
  clear_has_charset();
}
inline const ::std::string& BinlogEvent::charset() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.BinlogEvent.charset)
  return *charset_;
}
inline void BinlogEvent::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
  // @@protoc_insertion_point(field_set:mysql_replicator.BinlogEvent.charset)
}
inline void BinlogEvent::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
  // @@protoc_insertion_point(field_set_char:mysql_replicator.BinlogEvent.charset)
}
inline void BinlogEvent::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mysql_replicator.BinlogEvent.charset)
}
inline ::std::string* BinlogEvent::mutable_charset() {
  set_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charset_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mysql_replicator.BinlogEvent.charset)
  return charset_;
}
inline ::std::string* BinlogEvent::release_charset() {
  clear_has_charset();
  if (charset_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BinlogEvent::set_allocated_charset(::std::string* charset) {
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (charset) {
    set_has_charset();
    charset_ = charset;
  } else {
    clear_has_charset();
    charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.BinlogEvent.charset)
}

// optional .mysql_replicator.Row row = 6;
inline bool BinlogEvent::has_row() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BinlogEvent::set_has_row() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BinlogEvent::clear_has_row() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BinlogEvent::clear_row() {
  if (row_ != NULL) row_->::mysql_replicator::Row::Clear();
  clear_has_row();
}
inline const ::mysql_replicator::Row& BinlogEvent::row() const {
  // @@protoc_insertion_point(field_get:mysql_replicator.BinlogEvent.row)
  return row_ != NULL ? *row_ : *default_instance_->row_;
}
inline ::mysql_replicator::Row* BinlogEvent::mutable_row() {
  set_has_row();
  if (row_ == NULL) row_ = new ::mysql_replicator::Row;
  // @@protoc_insertion_point(field_mutable:mysql_replicator.BinlogEvent.row)
  return row_;
}
inline ::mysql_replicator::Row* BinlogEvent::release_row() {
  clear_has_row();
  ::mysql_replicator::Row* temp = row_;
  row_ = NULL;
  return temp;
}
inline void BinlogEvent::set_allocated_row(::mysql_replicator::Row* row) {
  delete row_;
  row_ = row;
  if (row) {
    set_has_row();
  } else {
    clear_has_row();
  }
  // @@protoc_insertion_point(field_set_allocated:mysql_replicator.BinlogEvent.row)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql_replicator

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mysql_replicator::MysqlType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysql_replicator::MysqlType>() {
  return ::mysql_replicator::MysqlType_descriptor();
}
template <> struct is_proto_enum< ::mysql_replicator::EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mysql_replicator::EventType>() {
  return ::mysql_replicator::EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_binlog_5fevent_2eproto__INCLUDED
