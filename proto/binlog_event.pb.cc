// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: binlog_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "binlog_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mysql_replicator {

namespace {

const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Row_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysubStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysubStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinlogEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinlogEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MysqlType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_binlog_5fevent_2eproto() {
  protobuf_AddDesc_binlog_5fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "binlog_event.proto");
  GOOGLE_CHECK(file != NULL);
  Field_descriptor_ = file->message_type(0);
  static const int Field_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, mysql_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, is_signed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, is_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, is_old_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, is_new_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, new_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, charset_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  Row_descriptor_ = file->message_type(1);
  static const int Row_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, field_),
  };
  Row_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Row_descriptor_,
      Row::default_instance_,
      Row_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Row));
  MysubStatus_descriptor_ = file->message_type(2);
  static const int MysubStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, safe_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, safe_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, progress_),
  };
  MysubStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysubStatus_descriptor_,
      MysubStatus::default_instance_,
      MysubStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysubStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysubStatus));
  BinlogEvent_descriptor_ = file->message_type(3);
  static const int BinlogEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, mysub_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, row_),
  };
  BinlogEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinlogEvent_descriptor_,
      BinlogEvent::default_instance_,
      BinlogEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinlogEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinlogEvent));
  MysqlType_descriptor_ = file->enum_type(0);
  EventType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_binlog_5fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Row_descriptor_, &Row::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysubStatus_descriptor_, &MysubStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinlogEvent_descriptor_, &BinlogEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_binlog_5fevent_2eproto() {
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Row::default_instance_;
  delete Row_reflection_;
  delete MysubStatus::default_instance_;
  delete MysubStatus_reflection_;
  delete BinlogEvent::default_instance_;
  delete BinlogEvent_reflection_;
}

void protobuf_AddDesc_binlog_5fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022binlog_event.proto\022\020mysql_replicator\"\320"
    "\001\n\005Field\022\014\n\004name\030\001 \002(\t\022/\n\nmysql_type\030\002 \002"
    "(\0162\033.mysql_replicator.MysqlType\022\030\n\tis_si"
    "gned\030\003 \002(\010:\005false\022\r\n\005is_pk\030\004 \002(\010\022\023\n\013is_o"
    "ld_null\030\006 \001(\010\022\021\n\told_value\030\007 \001(\014\022\023\n\013is_n"
    "ew_null\030\010 \001(\010\022\021\n\tnew_value\030\t \001(\014\022\017\n\007char"
    "set\030\n \001(\t\"-\n\003Row\022&\n\005field\030\001 \003(\0132\027.mysql_"
    "replicator.Field\"\235\001\n\013MysubStatus\022\020\n\010log_"
    "file\030\001 \002(\t\022\016\n\006offset\030\002 \002(\r\022\021\n\ttimestamp\030"
    "\003 \002(\r\022\023\n\013safe_offset\030\004 \002(\r\022\026\n\016safe_times"
    "tamp\030\005 \002(\r\022\014\n\004host\030\006 \002(\t\022\014\n\004port\030\007 \002(\r\022\020"
    "\n\010progress\030\010 \001(\004\"\303\001\n\013BinlogEvent\022\n\n\002db\030\001"
    " \002(\t\022\r\n\005table\030\002 \002(\t\022/\n\nevent_type\030\003 \002(\0162"
    "\033.mysql_replicator.EventType\0223\n\014mysub_st"
    "atus\030\004 \001(\0132\035.mysql_replicator.MysubStatu"
    "s\022\017\n\007charset\030\005 \001(\t\022\"\n\003row\030\006 \001(\0132\025.mysql_"
    "replicator.Row*\210\005\n\tMysqlType\022\026\n\022MYSQL_TY"
    "PE_DECIMAL\020\000\022\023\n\017MYSQL_TYPE_TINY\020\001\022\024\n\020MYS"
    "QL_TYPE_SHORT\020\002\022\023\n\017MYSQL_TYPE_LONG\020\003\022\024\n\020"
    "MYSQL_TYPE_FLOAT\020\004\022\025\n\021MYSQL_TYPE_DOUBLE\020"
    "\005\022\023\n\017MYSQL_TYPE_NULL\020\006\022\030\n\024MYSQL_TYPE_TIM"
    "ESTAMP\020\007\022\027\n\023MYSQL_TYPE_LONGLONG\020\010\022\024\n\020MYS"
    "QL_TYPE_INT24\020\t\022\023\n\017MYSQL_TYPE_DATE\020\n\022\023\n\017"
    "MYSQL_TYPE_TIME\020\013\022\027\n\023MYSQL_TYPE_DATETIME"
    "\020\014\022\023\n\017MYSQL_TYPE_YEAR\020\r\022\026\n\022MYSQL_TYPE_NE"
    "WDATE\020\016\022\026\n\022MYSQL_TYPE_VARCHAR\020\017\022\022\n\016MYSQL"
    "_TYPE_BIT\020\020\022\032\n\025MYSQL_TYPE_NEWDECIMAL\020\366\001\022"
    "\024\n\017MYSQL_TYPE_ENUM\020\367\001\022\023\n\016MYSQL_TYPE_SET\020"
    "\370\001\022\031\n\024MYSQL_TYPE_TINY_BLOB\020\371\001\022\033\n\026MYSQL_T"
    "YPE_MEDIUM_BLOB\020\372\001\022\031\n\024MYSQL_TYPE_LONG_BL"
    "OB\020\373\001\022\024\n\017MYSQL_TYPE_BLOB\020\374\001\022\032\n\025MYSQL_TYP"
    "E_VAR_STRING\020\375\001\022\026\n\021MYSQL_TYPE_STRING\020\376\001\022"
    "\030\n\023MYSQL_TYPE_GEOMETRY\020\377\001*A\n\tEventType\022\020"
    "\n\014UPDATE_EVENT\020\000\022\020\n\014INSERT_EVENT\020\001\022\020\n\014DE"
    "LETE_EVENT\020\002", 1372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "binlog_event.proto", &protobuf_RegisterTypes);
  Field::default_instance_ = new Field();
  Row::default_instance_ = new Row();
  MysubStatus::default_instance_ = new MysubStatus();
  BinlogEvent::default_instance_ = new BinlogEvent();
  Field::default_instance_->InitAsDefaultInstance();
  Row::default_instance_->InitAsDefaultInstance();
  MysubStatus::default_instance_->InitAsDefaultInstance();
  BinlogEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_binlog_5fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_binlog_5fevent_2eproto {
  StaticDescriptorInitializer_binlog_5fevent_2eproto() {
    protobuf_AddDesc_binlog_5fevent_2eproto();
  }
} static_descriptor_initializer_binlog_5fevent_2eproto_;
const ::google::protobuf::EnumDescriptor* MysqlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlType_descriptor_;
}
bool MysqlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventType_descriptor_;
}
bool EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Field::kNameFieldNumber;
const int Field::kMysqlTypeFieldNumber;
const int Field::kIsSignedFieldNumber;
const int Field::kIsPkFieldNumber;
const int Field::kIsOldNullFieldNumber;
const int Field::kOldValueFieldNumber;
const int Field::kIsNewNullFieldNumber;
const int Field::kNewValueFieldNumber;
const int Field::kCharsetFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_replicator.Field)
}

void Field::InitAsDefaultInstance() {
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mysql_replicator.Field)
}

void Field::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_type_ = 0;
  is_signed_ = false;
  is_pk_ = false;
  is_old_null_ = false;
  old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_new_null_ = false;
  new_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:mysql_replicator.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (old_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_value_;
  }
  if (new_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_value_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_binlog_5fevent_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Field*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mysql_type_, is_new_null_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_old_value()) {
      if (old_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        old_value_->clear();
      }
    }
    if (has_new_value()) {
      if (new_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_value_->clear();
      }
    }
  }
  if (has_charset()) {
    if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      charset_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mysql_replicator.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mysql_type;
        break;
      }

      // required .mysql_replicator.MysqlType mysql_type = 2;
      case 2: {
        if (tag == 16) {
         parse_mysql_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mysql_replicator::MysqlType_IsValid(value)) {
            set_mysql_type(static_cast< ::mysql_replicator::MysqlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_signed;
        break;
      }

      // required bool is_signed = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_is_signed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_signed_)));
          set_has_is_signed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_pk;
        break;
      }

      // required bool is_pk = 4;
      case 4: {
        if (tag == 32) {
         parse_is_pk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pk_)));
          set_has_is_pk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_old_null;
        break;
      }

      // optional bool is_old_null = 6;
      case 6: {
        if (tag == 48) {
         parse_is_old_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_old_null_)));
          set_has_is_old_null();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_old_value;
        break;
      }

      // optional bytes old_value = 7;
      case 7: {
        if (tag == 58) {
         parse_old_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_old_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_new_null;
        break;
      }

      // optional bool is_new_null = 8;
      case 8: {
        if (tag == 64) {
         parse_is_new_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_null_)));
          set_has_is_new_null();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_new_value;
        break;
      }

      // optional bytes new_value = 9;
      case 9: {
        if (tag == 74) {
         parse_new_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_new_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_charset;
        break;
      }

      // optional string charset = 10;
      case 10: {
        if (tag == 82) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mysql_replicator.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mysql_replicator.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mysql_replicator.Field)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .mysql_replicator.MysqlType mysql_type = 2;
  if (has_mysql_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mysql_type(), output);
  }

  // required bool is_signed = 3 [default = false];
  if (has_is_signed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_signed(), output);
  }

  // required bool is_pk = 4;
  if (has_is_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_pk(), output);
  }

  // optional bool is_old_null = 6;
  if (has_is_old_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_old_null(), output);
  }

  // optional bytes old_value = 7;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->old_value(), output);
  }

  // optional bool is_new_null = 8;
  if (has_is_new_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_new_null(), output);
  }

  // optional bytes new_value = 9;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->new_value(), output);
  }

  // optional string charset = 10;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->charset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mysql_replicator.Field)
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_replicator.Field)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .mysql_replicator.MysqlType mysql_type = 2;
  if (has_mysql_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mysql_type(), target);
  }

  // required bool is_signed = 3 [default = false];
  if (has_is_signed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_signed(), target);
  }

  // required bool is_pk = 4;
  if (has_is_pk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_pk(), target);
  }

  // optional bool is_old_null = 6;
  if (has_is_old_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_old_null(), target);
  }

  // optional bytes old_value = 7;
  if (has_old_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->old_value(), target);
  }

  // optional bool is_new_null = 8;
  if (has_is_new_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_new_null(), target);
  }

  // optional bytes new_value = 9;
  if (has_new_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->new_value(), target);
  }

  // optional string charset = 10;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->charset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_replicator.Field)
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .mysql_replicator.MysqlType mysql_type = 2;
    if (has_mysql_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mysql_type());
    }

    // required bool is_signed = 3 [default = false];
    if (has_is_signed()) {
      total_size += 1 + 1;
    }

    // required bool is_pk = 4;
    if (has_is_pk()) {
      total_size += 1 + 1;
    }

    // optional bool is_old_null = 6;
    if (has_is_old_null()) {
      total_size += 1 + 1;
    }

    // optional bytes old_value = 7;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->old_value());
    }

    // optional bool is_new_null = 8;
    if (has_is_new_null()) {
      total_size += 1 + 1;
    }

    // optional bytes new_value = 9;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->new_value());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string charset = 10;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mysql_type()) {
      set_mysql_type(from.mysql_type());
    }
    if (from.has_is_signed()) {
      set_is_signed(from.is_signed());
    }
    if (from.has_is_pk()) {
      set_is_pk(from.is_pk());
    }
    if (from.has_is_old_null()) {
      set_is_old_null(from.is_old_null());
    }
    if (from.has_old_value()) {
      set_old_value(from.old_value());
    }
    if (from.has_is_new_null()) {
      set_is_new_null(from.is_new_null());
    }
    if (from.has_new_value()) {
      set_new_value(from.new_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charset()) {
      set_charset(from.charset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mysql_type_, other->mysql_type_);
    std::swap(is_signed_, other->is_signed_);
    std::swap(is_pk_, other->is_pk_);
    std::swap(is_old_null_, other->is_old_null_);
    std::swap(old_value_, other->old_value_);
    std::swap(is_new_null_, other->is_new_null_);
    std::swap(new_value_, other->new_value_);
    std::swap(charset_, other->charset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Row::kFieldFieldNumber;
#endif  // !_MSC_VER

Row::Row()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_replicator.Row)
}

void Row::InitAsDefaultInstance() {
}

Row::Row(const Row& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mysql_replicator.Row)
}

void Row::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:mysql_replicator.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Row_descriptor_;
}

const Row& Row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_binlog_5fevent_2eproto();
  return *default_instance_;
}

Row* Row::default_instance_ = NULL;

Row* Row::New() const {
  return new Row;
}

void Row::Clear() {
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mysql_replicator.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mysql_replicator.Field field = 1;
      case 1: {
        if (tag == 10) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mysql_replicator.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mysql_replicator.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mysql_replicator.Row)
  // repeated .mysql_replicator.Field field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mysql_replicator.Row)
}

::google::protobuf::uint8* Row::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_replicator.Row)
  // repeated .mysql_replicator.Field field = 1;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_replicator.Row)
  return target;
}

int Row::ByteSize() const {
  int total_size = 0;

  // repeated .mysql_replicator.Field field = 1;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Row* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Row*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->field())) return false;
  return true;
}

void Row::Swap(Row* other) {
  if (other != this) {
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Row_descriptor_;
  metadata.reflection = Row_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysubStatus::kLogFileFieldNumber;
const int MysubStatus::kOffsetFieldNumber;
const int MysubStatus::kTimestampFieldNumber;
const int MysubStatus::kSafeOffsetFieldNumber;
const int MysubStatus::kSafeTimestampFieldNumber;
const int MysubStatus::kHostFieldNumber;
const int MysubStatus::kPortFieldNumber;
const int MysubStatus::kProgressFieldNumber;
#endif  // !_MSC_VER

MysubStatus::MysubStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_replicator.MysubStatus)
}

void MysubStatus::InitAsDefaultInstance() {
}

MysubStatus::MysubStatus(const MysubStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mysql_replicator.MysubStatus)
}

void MysubStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0u;
  timestamp_ = 0u;
  safe_offset_ = 0u;
  safe_timestamp_ = 0u;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  progress_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysubStatus::~MysubStatus() {
  // @@protoc_insertion_point(destructor:mysql_replicator.MysubStatus)
  SharedDtor();
}

void MysubStatus::SharedDtor() {
  if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_file_;
  }
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void MysubStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysubStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysubStatus_descriptor_;
}

const MysubStatus& MysubStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_binlog_5fevent_2eproto();
  return *default_instance_;
}

MysubStatus* MysubStatus::default_instance_ = NULL;

MysubStatus* MysubStatus::New() const {
  return new MysubStatus;
}

void MysubStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MysubStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(offset_, safe_timestamp_);
    ZR_(progress_, port_);
    if (has_log_file()) {
      if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_file_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysubStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mysql_replicator.MysubStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string log_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_file().data(), this->log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // required uint32 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_safe_offset;
        break;
      }

      // required uint32 safe_offset = 4;
      case 4: {
        if (tag == 32) {
         parse_safe_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safe_offset_)));
          set_has_safe_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_safe_timestamp;
        break;
      }

      // required uint32 safe_timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_safe_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safe_timestamp_)));
          set_has_safe_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }

      // required string host = 6;
      case 6: {
        if (tag == 50) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }

      // required uint32 port = 7;
      case 7: {
        if (tag == 56) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_progress;
        break;
      }

      // optional uint64 progress = 8;
      case 8: {
        if (tag == 64) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mysql_replicator.MysubStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mysql_replicator.MysubStatus)
  return false;
#undef DO_
}

void MysubStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mysql_replicator.MysubStatus)
  // required string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log_file(), output);
  }

  // required uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // required uint32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // required uint32 safe_offset = 4;
  if (has_safe_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->safe_offset(), output);
  }

  // required uint32 safe_timestamp = 5;
  if (has_safe_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->safe_timestamp(), output);
  }

  // required string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->host(), output);
  }

  // required uint32 port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }

  // optional uint64 progress = 8;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mysql_replicator.MysubStatus)
}

::google::protobuf::uint8* MysubStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_replicator.MysubStatus)
  // required string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_file(), target);
  }

  // required uint32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // required uint32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // required uint32 safe_offset = 4;
  if (has_safe_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->safe_offset(), target);
  }

  // required uint32 safe_timestamp = 5;
  if (has_safe_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->safe_timestamp(), target);
  }

  // required string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }

  // required uint32 port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->port(), target);
  }

  // optional uint64 progress = 8;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_replicator.MysubStatus)
  return target;
}

int MysubStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string log_file = 1;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_file());
    }

    // required uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required uint32 safe_offset = 4;
    if (has_safe_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safe_offset());
    }

    // required uint32 safe_timestamp = 5;
    if (has_safe_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->safe_timestamp());
    }

    // required string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required uint32 port = 7;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint64 progress = 8;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysubStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysubStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysubStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysubStatus::MergeFrom(const MysubStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_file()) {
      set_log_file(from.log_file());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_safe_offset()) {
      set_safe_offset(from.safe_offset());
    }
    if (from.has_safe_timestamp()) {
      set_safe_timestamp(from.safe_timestamp());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysubStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysubStatus::CopyFrom(const MysubStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysubStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MysubStatus::Swap(MysubStatus* other) {
  if (other != this) {
    std::swap(log_file_, other->log_file_);
    std::swap(offset_, other->offset_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(safe_offset_, other->safe_offset_);
    std::swap(safe_timestamp_, other->safe_timestamp_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysubStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysubStatus_descriptor_;
  metadata.reflection = MysubStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinlogEvent::kDbFieldNumber;
const int BinlogEvent::kTableFieldNumber;
const int BinlogEvent::kEventTypeFieldNumber;
const int BinlogEvent::kMysubStatusFieldNumber;
const int BinlogEvent::kCharsetFieldNumber;
const int BinlogEvent::kRowFieldNumber;
#endif  // !_MSC_VER

BinlogEvent::BinlogEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mysql_replicator.BinlogEvent)
}

void BinlogEvent::InitAsDefaultInstance() {
  mysub_status_ = const_cast< ::mysql_replicator::MysubStatus*>(&::mysql_replicator::MysubStatus::default_instance());
  row_ = const_cast< ::mysql_replicator::Row*>(&::mysql_replicator::Row::default_instance());
}

BinlogEvent::BinlogEvent(const BinlogEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mysql_replicator.BinlogEvent)
}

void BinlogEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  db_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
  mysub_status_ = NULL;
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  row_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinlogEvent::~BinlogEvent() {
  // @@protoc_insertion_point(destructor:mysql_replicator.BinlogEvent)
  SharedDtor();
}

void BinlogEvent::SharedDtor() {
  if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete db_;
  }
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (this != default_instance_) {
    delete mysub_status_;
    delete row_;
  }
}

void BinlogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinlogEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinlogEvent_descriptor_;
}

const BinlogEvent& BinlogEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_binlog_5fevent_2eproto();
  return *default_instance_;
}

BinlogEvent* BinlogEvent::default_instance_ = NULL;

BinlogEvent* BinlogEvent::New() const {
  return new BinlogEvent;
}

void BinlogEvent::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_db()) {
      if (db_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        db_->clear();
      }
    }
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    event_type_ = 0;
    if (has_mysub_status()) {
      if (mysub_status_ != NULL) mysub_status_->::mysql_replicator::MysubStatus::Clear();
    }
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charset_->clear();
      }
    }
    if (has_row()) {
      if (row_ != NULL) row_->::mysql_replicator::Row::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinlogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mysql_replicator.BinlogEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string db = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "db");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required string table = 2;
      case 2: {
        if (tag == 18) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // required .mysql_replicator.EventType event_type = 3;
      case 3: {
        if (tag == 24) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mysql_replicator::EventType_IsValid(value)) {
            set_event_type(static_cast< ::mysql_replicator::EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mysub_status;
        break;
      }

      // optional .mysql_replicator.MysubStatus mysub_status = 4;
      case 4: {
        if (tag == 34) {
         parse_mysub_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysub_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charset;
        break;
      }

      // optional string charset = 5;
      case 5: {
        if (tag == 42) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charset().data(), this->charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_row;
        break;
      }

      // optional .mysql_replicator.Row row = 6;
      case 6: {
        if (tag == 50) {
         parse_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mysql_replicator.BinlogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mysql_replicator.BinlogEvent)
  return false;
#undef DO_
}

void BinlogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mysql_replicator.BinlogEvent)
  // required string db = 1;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db(), output);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table(), output);
  }

  // required .mysql_replicator.EventType event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event_type(), output);
  }

  // optional .mysql_replicator.MysubStatus mysub_status = 4;
  if (has_mysub_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mysub_status(), output);
  }

  // optional string charset = 5;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charset(), output);
  }

  // optional .mysql_replicator.Row row = 6;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mysql_replicator.BinlogEvent)
}

::google::protobuf::uint8* BinlogEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mysql_replicator.BinlogEvent)
  // required string db = 1;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db(), target);
  }

  // required string table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table(), target);
  }

  // required .mysql_replicator.EventType event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event_type(), target);
  }

  // optional .mysql_replicator.MysubStatus mysub_status = 4;
  if (has_mysub_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mysub_status(), target);
  }

  // optional string charset = 5;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charset().data(), this->charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charset(), target);
  }

  // optional .mysql_replicator.Row row = 6;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mysql_replicator.BinlogEvent)
  return target;
}

int BinlogEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string db = 1;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }

    // required string table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // required .mysql_replicator.EventType event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional .mysql_replicator.MysubStatus mysub_status = 4;
    if (has_mysub_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysub_status());
    }

    // optional string charset = 5;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charset());
    }

    // optional .mysql_replicator.Row row = 6;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinlogEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinlogEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinlogEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinlogEvent::MergeFrom(const BinlogEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db()) {
      set_db(from.db());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_mysub_status()) {
      mutable_mysub_status()->::mysql_replicator::MysubStatus::MergeFrom(from.mysub_status());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
    if (from.has_row()) {
      mutable_row()->::mysql_replicator::Row::MergeFrom(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinlogEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinlogEvent::CopyFrom(const BinlogEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinlogEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_mysub_status()) {
    if (!this->mysub_status().IsInitialized()) return false;
  }
  if (has_row()) {
    if (!this->row().IsInitialized()) return false;
  }
  return true;
}

void BinlogEvent::Swap(BinlogEvent* other) {
  if (other != this) {
    std::swap(db_, other->db_);
    std::swap(table_, other->table_);
    std::swap(event_type_, other->event_type_);
    std::swap(mysub_status_, other->mysub_status_);
    std::swap(charset_, other->charset_);
    std::swap(row_, other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinlogEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinlogEvent_descriptor_;
  metadata.reflection = BinlogEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mysql_replicator

// @@protoc_insertion_point(global_scope)
